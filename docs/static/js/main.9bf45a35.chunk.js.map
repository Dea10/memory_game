{"version":3,"sources":["components/Game/GameScreen.module.scss","components/Home/HomeScreen.module.scss","components/RankingScreen/RankingScreen.module.scss","components/Buttons/Button.module.scss","components/Game/Card.module.scss","components/Game/RankingForm.module.scss","components/Game/Scoreboard.module.scss","components/Game/Timer.tsx","components/Buttons/Button.tsx","components/helpers/getRandomArray.ts","components/helpers/getGameCards.ts","components/Game/Card.tsx","components/Game/RankingForm.tsx","components/Game/Scoreboard.tsx","components/Game/GameScreen.tsx","components/Home/HomeScreen.tsx","components/RankingScreen/RankingScreen.tsx","router/AppRouter.tsx","MemoryGameApp.tsx","index.js"],"names":["module","exports","interval","Button","label","color","onClick","divStyle","backgroundColor","className","styles","button","style","getRandomArray","limit","apiLimit","includeZero","zero","arr","length","newElement","Math","floor","random","includes","push","getGameCards","randomSprites","duplicatedRandomSprites","positionsArray","gameArray","i","map","item","id","isShown","isPaired","Card","cardIndex","showCard","useState","name","imgUrl","pokemon","setPokemon","boardState","useContext","BoardContext","getPokemon","a","baseUrl","fetch","response","json","sprites","front_default","useEffect","isActive","card","src","alt","RankingForm","time","setIsRanked","nickname","setNickname","saveRecord","event","preventDefault","newPlayer","localRanking","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","rankingForm","type","onChange","target","value","Timer","setTime","secs","setSecs","mins","setMins","isStarted","setInterval","clearInterval","isFinished","Scoreboard","score","scoreboard","React","createContext","GameScreen","gameCards","setGameCards","selectedCard","setSelectedCard","setScore","setIsActive","setIsStarted","setIsFinished","isRanked","index","cards","console","log","setPaired","index1","index2","setTimeout","hideCards","Provider","gameScreen","link","to","gameBoard","aux","HomeScreen","homeScreen","RankingScreen","ranking","rankingScreen","sort","b","slice","player","idx","AppRouter","path","MemoryGameApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bf45a35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameScreen\":\"GameScreen_gameScreen__2Buni\",\"link\":\"GameScreen_link__3bEPJ\",\"gameBoard\":\"GameScreen_gameBoard__2pyYS\",\"scoreboard\":\"GameScreen_scoreboard__1WFDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeScreen\":\"HomeScreen_homeScreen__3dm0M\",\"link\":\"HomeScreen_link__2u-Oa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rankingScreen\":\"RankingScreen_rankingScreen__Gw6iJ\",\"link\":\"RankingScreen_link__299Ei\",\"ranking\":\"RankingScreen_ranking__3as0_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3RvLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__13ZKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rankingForm\":\"RankingForm_rankingForm__3ihdO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__19oA5\"};","import React, { useContext, useEffect, useState } from 'react';\nimport { BoardContext } from './GameScreen';\n\ntype TimerProps = {\n    setTime: (secs: number) => void;\n};\n\nlet interval: any;\nconst Timer = ({ setTime }: TimerProps) => {\n\n    const [secs, setSecs] = useState(0);\n    const [mins, setMins] = useState(0);\n    const boardState = useContext(BoardContext)\n\n    useEffect(() => {\n        if(boardState.isStarted) {\n            interval = setInterval(() => {\n                setSecs(secs+1);\n                if(secs === 59) {\n                    setSecs(0);\n                    setMins(mins+1);\n                }\n            }, 1000);\n    \n            return () => clearInterval(interval);\n        }\n    }, [secs, boardState.isStarted]);\n\n    useEffect(() => {\n        if(boardState.isFinished) {\n            clearInterval(interval);\n            setTime((mins * 60) + secs);\n        }\n    }, [boardState.isFinished]);\n\n    return (\n        <h3>Time: {mins < 10 ? '0' + mins : mins}:{secs < 10 ? '0' + secs : secs}</h3>\n    );\n};\n\nexport default Timer;","import React from 'react';\nimport styles from './Button.module.scss';\n\ntype ButtonProps = {\n    label: string;\n    color: string;\n    onClick?: (smt?: any) => void;\n}\n\nconst Button = ({ label, color, onClick }: ButtonProps) => {\n\n    const divStyle = {\n        backgroundColor: color\n    };\n\n    return (\n        <div className={styles.button} style={divStyle} onClick={onClick}>\n            <span>{label}</span>\n        </div>\n    );\n};\n\nexport default Button;","export const getRandomArray = (limit: number = 10, apiLimit: number = 151, includeZero: boolean = false) => {\n    const zero = includeZero ? 0 : 1;\n    const arr: number[] = [];\n    \n    while(arr.length !== limit) {\n        const newElement = Math.floor(Math.random() * (apiLimit + zero));\n        if(!arr.includes(newElement)) {\n            arr.push(newElement);\n        }        \n    }\n\n    return arr;\n};\n","import { getRandomArray } from \"./getRandomArray\";\n\nexport const getGameCards = () => {\n    const randomSprites = getRandomArray();\n    const duplicatedRandomSprites = [...randomSprites, ...randomSprites];\n    const positionsArray = getRandomArray(duplicatedRandomSprites.length, duplicatedRandomSprites.length, true);\n\n    const gameArray = [...duplicatedRandomSprites];\n    for (let i = 0; i < duplicatedRandomSprites.length; i++) {\n        gameArray[i] = duplicatedRandomSprites[positionsArray[i]];\n    }\n\n    const gameCards = gameArray.map(item => {\n        return {\n            id: item,\n            isShown: false,\n            isPaired: false\n        }\n    });\n\n    return gameCards;\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { BoardContext } from './GameScreen';\nimport styles from './Card.module.scss';\n\ntype CardProps = {\n    id: number;\n    isShown: boolean;\n    cardIndex: number;\n    isPaired: boolean;\n    showCard: (index: number) => void;\n}\n\nconst Card = ({id, isShown, cardIndex, isPaired, showCard}: CardProps) => {\n\n    const noResponse = {\n        name: '',\n        imgUrl: ''\n    }\n    const [pokemon, setPokemon] = useState(noResponse);\n    const boardState = useContext(BoardContext);\n\n    const getPokemon = async () => {\n        const baseUrl = `https://pokeapi.co/api/v2/pokemon/${id}`;\n        const response = await fetch(baseUrl);\n        const {name, sprites} = await response.json();\n        const {front_default: imgUrl} = sprites;\n\n        const pokemon = {\n            name,\n            imgUrl\n        }\n\n        setPokemon(pokemon);\n    };\n\n    const handleToggle = () => {\n        if(isPaired || !boardState.isActive || isShown) {\n            return;\n        }\n        showCard(cardIndex);\n    };\n\n    useEffect(() => {\n        getPokemon();\n    }, [])\n\n    return (\n        <div\n            onClick={handleToggle}\n            className={styles.card}\n        >\n            {\n                isShown ?\n\n                <div>\n                    <img src={pokemon.imgUrl} alt={pokemon.name} />\n                    <small>{pokemon.name}</small>\n                </div>\n                :\n                <div>\n                    <small>back</small>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Card;","import React, { useState } from 'react';\nimport Button from '../Buttons/Button';\nimport styles from './RankingForm.module.scss';\n\ntype RankingFormProps = {\n    time: number;\n    setIsRanked: (value: boolean) => void;\n}\n\ntype player = {\n    nickname: string;\n    time: number;\n}\n\nconst RankingForm = ({ time, setIsRanked }: RankingFormProps) => {\n\n    const [nickname, setNickname] = useState('');\n\n    const handleOnChange = (event: any) => {\n        setNickname(event.target.value);\n    }\n\n    const saveRecord = (event: any) => {\n        event.preventDefault();\n\n        setIsRanked(true);\n\n        const newPlayer = {\n            nickname,\n            time\n        }\n\n        const localRanking = JSON.parse(localStorage.getItem('ranking') || '[]');\n        localRanking.push(newPlayer);\n\n        localStorage.setItem('ranking', JSON.stringify(localRanking));\n    };\n\n    return (\n        <form \n            onSubmit={saveRecord}\n            className={styles.rankingForm}\n        >\n            <input type='text' className='form-control' onChange={handleOnChange} />\n            <Button \n                label='submit'\n                color='black'\n                onClick={saveRecord}\n            />\n        </form>\n    );\n}\n\nexport default RankingForm;","import React from 'react';\nimport styles from './Scoreboard.module.scss';\nimport Timer from './Timer';\n\ntype ScoreboardProps = {\n    score: number;\n    setTime: (secs: number) => void;\n}\n\nconst Scoreboard = ({ score, setTime } : ScoreboardProps) => {\n\n    return (\n        <div className={styles.scoreboard}>\n            <Timer \n                setTime={setTime}\n            />\n            <h3>Score: {score}</h3>\n        </div>\n    );\n};\n\nexport default Scoreboard;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '../Buttons/Button';\nimport { getGameCards } from '../helpers/getGameCards';\nimport Card from './Card';\nimport styles from './GameScreen.module.scss';\nimport RankingForm from './RankingForm';\nimport Scoreboard from './Scoreboard';\n\nexport const BoardContext = React.createContext({\n    isActive: false,\n    isStarted: false,\n    isFinished: false\n});\n\nconst GameScreen = () => {\n    const [gameCards, setGameCards] = useState(getGameCards);\n    const [selectedCard, setSelectedCard] = useState(-1);\n    const [score, setScore] = useState(0);\n    const [isActive, setIsActive] = useState(false);\n    const [isStarted, setIsStarted] = useState(false);\n    const [isFinished, setIsFinished] = useState(false);\n    const [time, setTime] = useState(0);\n    const [isRanked, setIsRanked] = useState(false);\n\n    // restart is not working, do not know why :(\n    const restart = () => {\n        const aux = getGameCards();\n        setGameCards(aux);\n        setSelectedCard(-1);\n        setScore(0);\n        setIsActive(false);\n        setIsStarted(false);\n        setIsFinished(false);\n        setTime(0);\n        setIsRanked(false);\n    }\n\n    const hideCards = (index1: number, index2: number) => {\n        const cards = [...gameCards];\n\n        cards[index1] = {\n            ...cards[index1],\n            isShown: false\n        };\n\n        cards[index2] = {\n            ...cards[index2],\n            isShown: false\n        };\n\n        setTimeout(() => {\n            setGameCards(cards);\n            setIsActive(true);\n        }, 2000);\n\n        setSelectedCard(-1);\n    }\n\n    const showCard = (index: number) => {\n        const cards = [...gameCards];\n        cards[index].isShown = true;\n\n        setGameCards(cards);\n\n        setSelectedCard(index);\n        if (cards[selectedCard]?.id === cards[index].id) {\n            setScore(score + 1);\n            console.log('score: ', score);\n            setPaired(index);\n            setPaired(selectedCard);\n            setSelectedCard(-1);\n            if (score + 1 === cards.length / 2) {\n                console.log('Finished game');\n                setIsFinished(true);\n                setIsActive(false);\n            }\n        } else {\n            if (selectedCard !== -1) {\n                setIsActive(false);\n                hideCards(index, selectedCard);\n            }\n        }\n    };\n\n    const setPaired = (index: number) => {\n        const cards = [...gameCards];\n        cards[index].isPaired = true;\n\n        setGameCards(cards);\n    };\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsStarted(true);\n    }\n\n    return (\n        <BoardContext.Provider value={{ isActive, isStarted, isFinished }}>\n            <div className={styles.gameScreen}>\n                <Link className={styles.link} to=\"/home\">\n                    <Button\n                        label='Home'\n                        color='#4CC0A6'\n                    />\n                </Link>\n                <div className={styles.gameBoard}>\n                    {\n                        gameCards.map((item, index) => {\n                            return <Card\n                                cardIndex={index}\n                                id={item.id}\n                                isShown={item.isShown}\n                                isPaired={item.isPaired}\n                                key={index}\n                                showCard={showCard}\n                            />\n                        })\n                    }\n                </div>\n                <div className={styles.scoreboard}>\n                    <Scoreboard\n                        score={score}\n                        setTime={setTime}\n                    />\n                    {\n                        !isStarted &&\n                        <Button\n                            label='Start'\n                            color='#ffcb05'\n                            onClick={handleStart}\n                        />\n                    }\n                    {\n                        isFinished && !isRanked &&\n                        <RankingForm\n                            time={time}\n                            setIsRanked={setIsRanked}\n                        />\n                    }\n                    {\n                        isStarted &&\n                        <Button\n                            label='Restart'\n                            color='red'\n                            onClick={restart}\n                        />\n                    }\n                </div>\n            </div>\n        </BoardContext.Provider>\n    );\n};\n\nexport default GameScreen;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Button from '../Buttons/Button';\nimport styles from './HomeScreen.module.scss';\n\nconst HomeScreen = () => {\n\n    return (\n        <div className={styles.homeScreen}>\n            <Link className={styles.link} to=\"/game\">\n                <Button\n                    label='Play'\n                    color='#4CC0A6'\n                />\n            </Link>\n            <Link className={styles.link} to=\"/ranking\">\n                <Button \n                    label='Ranking'\n                    color='#FF5054'\n                />\n            </Link>\n        </div>\n    );\n};\n\nexport default HomeScreen;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '../Buttons/Button';\nimport styles from './RankingScreen.module.scss';\n\nconst RankingScreen = () => {\n\n    const arr = [1, 2, 3, 4, 5];\n    const mockData = arr.map(item => ({\n        nickname: `player0${item}`,\n        time: Math.floor(Math.random() * 10)\n    }));\n\n    const ranking = JSON.parse(localStorage.getItem('ranking') || '[]');\n\n    return (\n        <div className={styles.rankingScreen}>\n            <Link className={styles.link} to=\"/home\">\n                <Button\n                    label='Home'\n                    color='#4CC0A6'\n                />\n            </Link>\n            <h2>Ranking</h2>\n            <ul className={styles.ranking}>\n                {\n                    ranking.sort((a: { time: number; }, b: { time: number; }) => (a.time - b.time)).slice(0, 4).map((player: { nickname: string; time: number; }, idx: number) => {\n                        return (\n                            <li key={idx}>\n                                {idx + 1} - {player.nickname}\n                                <p>{`Time: ${player.time}`}</p>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default RankingScreen;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\nimport GameScreen from '../components/Game/GameScreen';\nimport HomeScreen from '../components/Home/HomeScreen';\nimport RankingScreen from '../components/RankingScreen/RankingScreen';\n\nconst AppRouter = () => {\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <Route path=\"/home\">\n                        <HomeScreen />\n                    </Route>\n                    <Route path=\"/ranking\">\n                        <RankingScreen />\n                    </Route>\n                    <Route path=\"/game\">\n                        <GameScreen />\n                    </Route>\n                    <Route path=\"/\">\n                        <HomeScreen />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './router/AppRouter';\n\n\nconst MemoryGameApp = () => {\n    return (\n        <div>\n            <AppRouter />\n        </div>\n    );\n};\n\nexport default MemoryGameApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MemoryGameApp from './MemoryGameApp';\n\nReactDOM.render(<MemoryGameApp />, document.getElementById('root'));\n"],"sourceRoot":""}